pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: zap
    image: zaproxy/zap-stable
    command:
    - cat
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /zap/wrk
  volumes:
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }
    parameters {
        string(name: 'TARGET_URL', defaultValue: 'http://example.com', description: 'URL objetivo para el análisis')
    }
    environment {
        REPORT_DIR = '/zap/wrk' // Directorio para guardar reportes
        HTML_REPORT = 'report_html.html'
        JSON_REPORT = 'report_json.json'
        XML_REPORT = 'report_xml.xml'
    }
    stages {
        stage('Run OWASP ZAP') {
            steps {
                container('zap') {
                    script {
                        // Crear el directorio para reportes
                        sh "mkdir -p ${env.REPORT_DIR}"

                        // Ejecutar OWASP ZAP y generar reportes en diferentes formatos
                        sh """
                        echo "Ejecutando OWASP ZAP Full Scan..."
                        python3 /zap/zap-full-scan.py \
                            -t ${params.TARGET_URL} \
                            -r ${env.REPORT_DIR}/${env.HTML_REPORT} \
                            -J ${env.REPORT_DIR}/${env.JSON_REPORT} \
                            -x ${env.REPORT_DIR}/${env.XML_REPORT} \
                            -d
                        """

                        // Copiar solo los reportes al workspace de Jenkins
                        sh "cp ${env.REPORT_DIR}/${env.HTML_REPORT} ${WORKSPACE}/"
                        sh "cp ${env.REPORT_DIR}/${env.JSON_REPORT} ${WORKSPACE}/"
                        sh "cp ${env.REPORT_DIR}/${env.XML_REPORT} ${WORKSPACE}/"
                    }
                }
            }
        }

               stage('Check Critical Issues') {
            steps {
                container('zap') {
                    script {
                        // Verificar si los reportes fueron generados correctamente
                        sh """
                        if [ ! -f "${WORKSPACE}/${env.JSON_REPORT}" ]; then
                            echo "El archivo JSON no se generó correctamente."
                            exit 1
                        fi
                        """

                        // Leer el reporte JSON generado
                        def jsonReport = readJSON file: "${WORKSPACE}/${env.JSON_REPORT}"

                        // Filtrar vulnerabilidades críticas (riskcode == '2')
                        def criticalAlerts = jsonReport.site[0].alerts.findAll { it.riskcode == '2' }

                        // Manejar vulnerabilidades críticas
                        if (criticalAlerts.size() > 0) {
                            echo "Se encontraron vulnerabilidades críticas:"
                            criticalAlerts.each { alert ->
                                echo "[CRÍTICO] - ${alert.alertRef}.${alert.name}: ${alert.desc}"
                            }
                            error("El pipeline falló debido a vulnerabilidades críticas detectadas.")
                        } else {
                            echo "No se encontraron vulnerabilidades críticas. Continuando..."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Generando reportes..."
            // Archivar los reportes generados
            archiveArtifacts artifacts: "${env.HTML_REPORT}, ${env.JSON_REPORT}, ${env.XML_REPORT}", allowEmptyArchive: true
        }

        failure {
            withCredentials([string(credentialsId: 'TEAMS_WEBHOOK_URL', variable: 'TEAMS_WEBHOOK_URL')]) {
                echo "El pipeline ha fallado. Enviando notificación a Teams..."
                office365ConnectorSend message: """
                    **Pipeline Fallido**
                    
                    - **Job Name**: ${env.JOB_NAME}
                    - **Build Number**: ${env.BUILD_NUMBER}
                    - **URL**: [Ver detalles del Build](${env.BUILD_URL})
                """,
                status: 'FAILED',
                webhookUrl: TEAMS_WEBHOOK_URL
            }
        }

    }
}
