pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: zap
    image: zaproxy/zap-stable
    command:
    - cat
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /zap/wrk
  volumes:
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }
    parameters {
        string(name: 'TARGET_URL', defaultValue: 'http://example.com', description: 'URL objetivo para el análisis')
        string(name: 'HTML_REPORT', defaultValue: 'zap_report.html', description: 'Nombre del reporte en HTML')
        string(name: 'JSON_REPORT', defaultValue: 'zap_report.json', description: 'Nombre del reporte en JSON')
        string(name: 'XML_REPORT', defaultValue: 'zap_report.xml', description: 'Nombre del reporte en XML')
    }
    environment {
        REPORT_DIR = '/zap/wrk' // Directorio para guardar reportes
    }
    stages {
        stage('Run OWASP ZAP') {
            steps {
                container('zap') {
                    script {
                        // Crear el directorio para reportes
                        sh "mkdir -p ${env.REPORT_DIR}"

                        // Ejecutar OWASP ZAP y generar reportes en diferentes formatos
                        sh """
                        echo "Ejecutando OWASP ZAP en Kubernetes..."
                        zap.sh -cmd -quickurl ${params.TARGET_URL} -quickout ${env.REPORT_DIR}/${params.HTML_REPORT}
                        zap.sh -cmd -quickurl ${params.TARGET_URL} -quickout ${env.REPORT_DIR}/${params.JSON_REPORT}
                        zap.sh -cmd -quickurl ${params.TARGET_URL} -quickout ${env.REPORT_DIR}/${params.XML_REPORT}
                        """

                        // Copiar solo los reportes al workspace de Jenkins
                        sh "cp ${env.REPORT_DIR}/${params.HTML_REPORT} ${WORKSPACE}/"
                        sh "cp ${env.REPORT_DIR}/${params.JSON_REPORT} ${WORKSPACE}/"
                        sh "cp ${env.REPORT_DIR}/${params.XML_REPORT} ${WORKSPACE}/"
                    }
                }
            }
        }

        stage('Check Critical Issues') {
            steps {
                script {
                    // Verificar si hay vulnerabilidades críticas en el reporte JSON
                    def jsonReport = readJSON file: "${WORKSPACE}/${params.JSON_REPORT}"
                    def criticalAlerts = jsonReport.site[0].alerts.findAll { it.riskcode == '2' }

                    if (criticalAlerts.size() > 0) {
                        echo "Se encontraron vulnerabilidades críticas:"
                        criticalAlerts.each { alert ->
                            echo "- ${alert.alertRef}.${alert.name}: ${alert.desc}"
                        }
                        error("El pipeline falló debido a vulnerabilidades críticas detectadas.Revisa los reportes generados o los logs de la pipeline.")
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Generando reportes..."
            // Archivar los reportes generados
            archiveArtifacts artifacts: "${params.HTML_REPORT}, ${params.JSON_REPORT}, ${params.XML_REPORT}", allowEmptyArchive: true
        }
         failure {
            withCredentials([string(credentialsId: 'TEAMS_WEBHOOK_URL', variable: 'TEAMS_WEBHOOK_URL')]) {
                echo "El pipeline ha fallado. Enviando notificación a Teams..."
                office365ConnectorSend message: """
                    El pipeline '${env.JOB_NAME}' falló en el build #${env.BUILD_NUMBER}.
                    URL objetivo: ${params.TARGET_URL}.
                    Más detalles: ${env.BUILD_URL}.
                """,
                status: 'FAILED',
                webhookUrl: TEAMS_WEBHOOK_URL
            }
        }
    }
}
