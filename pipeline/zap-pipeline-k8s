pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: zap
    image: zaproxy/zap-stable
    command:
    - cat
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /zap/wrk
  volumes:
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }
    parameters {
        string(name: 'TARGET_URL', defaultValue: 'http://example.com', description: 'URL objetivo para el análisis')
    }
    environment {
        REPORT_DIR = '/zap/wrk' // Directorio para guardar reportes
        HTML_REPORT = 'report_html.html'
        JSON_REPORT = 'report_json.json'
        XML_REPORT = 'report_xml.xml'
    }
    stages {
        stage('Run OWASP ZAP') {
            steps {
                container('zap') {
                    script {
                        // Crear el directorio para reportes
                        sh "mkdir -p ${env.REPORT_DIR}"

                        // Ejecutar OWASP ZAP y generar reportes en diferentes formatos
                        sh """
                        echo "Ejecutando OWASP ZAP en Kubernetes..."
                        zap.sh -cmd -quickurl ${params.TARGET_URL} -quickout ${env.REPORT_DIR}/${HTML_REPORT}
                        zap.sh -cmd -quickurl ${params.TARGET_URL} -quickout ${env.REPORT_DIR}/${JSON_REPORT}
                        zap.sh -cmd -quickurl ${params.TARGET_URL} -quickout ${env.REPORT_DIR}/${XML_REPORT}
                        """

                        // Copiar solo los reportes al workspace de Jenkins
                        sh "cp ${env.REPORT_DIR}/${HTML_REPORT} ${WORKSPACE}/"
                        sh "cp ${env.REPORT_DIR}/${JSON_REPORT} ${WORKSPACE}/"
                        sh "cp ${env.REPORT_DIR}/${XML_REPORT} ${WORKSPACE}/"
                    }
                }
            }
        }

        stage('Package Reports into ZIP') {
            steps {
                script {
                    // Crear un directorio temporal para los reportes
                    sh "mkdir -p ${WORKSPACE}/report_files"
                    
                    // Mover los reportes al directorio temporal
                    sh "mv ${WORKSPACE}/${HTML_REPORT} ${WORKSPACE}/report_files/"
                    sh "mv ${WORKSPACE}/${JSON_REPORT} ${WORKSPACE}/report_files/"
                    sh "mv ${WORKSPACE}/${XML_REPORT} ${WORKSPACE}/report_files/"
                    
                    // Generar el nombre dinámico del ZIP
                    def zipName = "SCAN_ZAP_${new Date().format('yyyyMMdd_HHmmss')}.zip"
                    
                    // Crear un archivo ZIP con el nombre dinámico
                    sh "cd ${WORKSPACE} && zip -r ${zipName} report_files"
                    
                    // Exportar el nombre del ZIP para usarlo más adelante
                    env.ZIP_NAME = zipName
                }
            }
        }
    }

    post {
        always {
            echo "Generando reportes..."
            // Archivar el archivo ZIP con el nombre dinámico
            archiveArtifacts artifacts: "${env.ZIP_NAME}", allowEmptyArchive: true
        }
        failure {
            withCredentials([string(credentialsId: 'TEAMS_WEBHOOK_URL', variable: 'TEAMS_WEBHOOK_URL')]) {
                echo "El pipeline ha fallado. Enviando notificación a Teams..."
                office365ConnectorSend message: """
                    El pipeline '${env.JOB_NAME}' falló en el build #${env.BUILD_NUMBER}.
                    URL objetivo: ${params.TARGET_URL}.
                    Más detalles: ${env.BUILD_URL}.
                    El archivo de reportes se llama: ${env.ZIP_NAME}.
                """,
                status: 'FAILED',
                webhookUrl: TEAMS_WEBHOOK_URL
            }
        }
    }
}
